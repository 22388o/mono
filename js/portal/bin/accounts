#!/usr/bin/env node

const crypto = require("crypto")
const fs = require("fs")
const path = require('path')
const bitcoin = require('bitcoinjs-lib')
const bip32 = require('bip32')
const bip39 = require('bip39')
const _ = require("lodash")

const JSON_SPACE = 4


const wallets = [
  { "alice": {
        "mnemonic": "brain case hire edit submit cup spend sign crystal measure gadget install",
        "passphrase": { "regtest": "", "testnet": "", "mainnet": "" }
  }},
  { "bob": {
        "mnemonic": "come plastic first ginger sign nephew clever april salt banner monkey relief",
        "passphrase": { "regtest": "", "testnet": "", "mainnet": "" }
  }},
  { "alice-test": {
        "mnemonic": "theme gallery agree spell team control velvet window voice borrow across report",
        "passphrase": { "regtest": "", "testnet": "", "mainnet": "" }
  }},
  { "miner": {
      "mnemonic": "become divide grief real garden stick lecture proof aisle relax mixture flower",
      "passphrase": { "regtest": "", "testnet": "", "mainnet": "" }
  }}
]

const accountNames = ["submarine", "ordinal"]

const networks = ["regtest", "testnet", "mainnet"]

const addressCount = 2

let accounts = {}

wallets.forEach((walletInfo, walletIndex) => {

  let walletName = Object.keys(walletInfo)
  let mnemonic = walletInfo[walletName].mnemonic
  let passphrase = walletInfo[walletName].passphrase

  let wallet = [{ "mnemonic": mnemonic }]

  networks.forEach((networkName, networkIndex) => {
    let network = bitcoin.networks[networkName]
    let seed = bip39.mnemonicToSeedSync(mnemonic, passphrase[networkName])
    let master = bip32.fromSeed(seed, network)
    let xpub = master.neutered().toBase58()
    let pubKeyFingerprint = bitcoin.crypto.hash160(master.publicKey).slice(0, 4).toString('hex')

    const keyPair = master.derivePath('m/0')
    const masterWif = master.toWIF()
    const privateKeyBuffer = Buffer.from(keyPair.privateKey)
    const privateKey = privateKeyBuffer.toString('hex')


    let networkNodes = {
      "master": {
        "xpub": xpub,
        "pubKeyFingerprint": pubKeyFingerprint,
        "wif": masterWif,
        "privateKey": privateKey
      }
    }

    accountNames.forEach((accountName, i) => {
      let cointype

      if (networkName == "mainnet") {
        cointype = 0
      } else if (["regtest", "testnet"].includes(networkName)) {
        cointype = 1
      } else {
        throw new Error(`Cointype for network '${networkName}' not known`)
      }

      let accountPath = `m/84'/${cointype}'/${i}'`

      let account = master.derivePath(accountPath)
      let xpub = account.neutered().toBase58()
      let accountPrivateKey = Buffer.from(master.privateKey).toString('hex')
      let accountWif = account.toWIF()

      let addresses = []

      _.range(addressCount).forEach(j => {

        let path = `${accountPath}/0/${j}`
        let child = master.derivePath(path)
        let wif = child.toWIF()
        let p2wpkh = bitcoin.payments.p2wpkh({ pubkey: child.publicKey, network })
        let p2wpkhAddress = p2wpkh.address

        let privateKeyBuffer = Buffer.from(child.privateKey)
        let privateKey = privateKeyBuffer.toString('hex')

        addresses.push({
          "wif": wif,
          "p2wpkh": p2wpkhAddress,
          "path": path.replace("'", "'"),
          "privateKey": privateKey
        })
      })
      let accountNodes = {
        "xpub": xpub,
        "path": accountPath.replace("'", "'"),
        "addresses": addresses,
        "accountPrivateKey": accountPrivateKey,
        "accountWif": accountWif
      }

      _.set(networkNodes, accountName, accountNodes)

    })

    let networkInfo = {}
    _.set(networkInfo, networkName, networkNodes)
    wallet.push(networkInfo)
  })

  _.set(accounts, walletName, wallet)

})

fs.writeFile(path.join(__dirname, "../config/accounts.json"), JSON.stringify(accounts, null, 4), (err) => {
  if (err) {  console.error(err);  return; };
  console.log("The file accounts.json has been created in the config folder");
});





